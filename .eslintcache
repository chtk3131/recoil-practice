[{"/Users/ochiai/Desktop/Dev/React/recoil-sample/src/App.tsx":"1","/Users/ochiai/Desktop/Dev/React/recoil-sample/src/reportWebVitals.ts":"2","/Users/ochiai/Desktop/Dev/React/recoil-sample/src/components/TodoItem.tsx":"3","/Users/ochiai/Desktop/Dev/React/recoil-sample/src/index.tsx":"4","/Users/ochiai/Desktop/Dev/React/recoil-sample/src/components/TodoItemCreator.tsx":"5","/Users/ochiai/Desktop/Dev/React/recoil-sample/src/atom/TodoListState.ts":"6","/Users/ochiai/Desktop/Dev/React/recoil-sample/src/components/TodoList.tsx":"7","/Users/ochiai/Desktop/Dev/React/recoil-sample/src/components/TodoListFilters.tsx":"8","/Users/ochiai/Desktop/Dev/React/recoil-sample/src/components/TodoListStats.tsx":"9"},{"size":198,"mtime":1610850002964,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1610846322773,"results":"12","hashOfConfig":"11"},{"size":1643,"mtime":1610861088811,"results":"13","hashOfConfig":"11"},{"size":271,"mtime":1610848430577,"results":"14","hashOfConfig":"11"},{"size":1039,"mtime":1610861250420,"results":"15","hashOfConfig":"11"},{"size":1831,"mtime":1610869581602,"results":"16","hashOfConfig":"11"},{"size":675,"mtime":1610864605574,"results":"17","hashOfConfig":"11"},{"size":1108,"mtime":1610865101155,"results":"18","hashOfConfig":"11"},{"size":632,"mtime":1610870000130,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w5ak7h",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ochiai/Desktop/Dev/React/recoil-sample/src/App.tsx",[],"/Users/ochiai/Desktop/Dev/React/recoil-sample/src/reportWebVitals.ts",[],"/Users/ochiai/Desktop/Dev/React/recoil-sample/src/components/TodoItem.tsx",["39","40"],"import React from 'react';\nimport { useRecoilState } from 'recoil';\n\nimport { TodoState, TodoListState } from '../atom/TodoListState';\n\ntype Props = {\n  item: TodoState;\n};\n\nexport const TodoItem: React.FC<Props> = ({ item }) => {\n  const [todoList, setTodoList] = useRecoilState(TodoListState);\n\n  const handleChangeText = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // テキストを変更して更新\n    const newList = todoList.map((value: TodoState) => {\n      if (value.id === item.id) {\n        return {\n          ...value,\n          text: e.target.value,\n        };\n      }\n      return value;\n    });\n\n    setTodoList([...newList]);\n  };\n\n  const handleChangeCheck = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // リストのうちの１つをupdateしてリスト自体を更新する必要がある\n    const newList = todoList.map((value: TodoState) => {\n      if (item.id === value.id) {\n        return {\n          ...item,\n          isComplete: !value.isComplete,\n        };\n      }\n      return value;\n    });\n\n    setTodoList([...newList]);\n  };\n\n  const handleDeleteClicked = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    const newList = todoList.filter((value: TodoState) => {\n      if (value.id !== item.id) {\n        return value;\n      }\n    });\n\n    setTodoList([...newList]);\n  };\n\n  return (\n    <div>\n      <input type=\"text\" value={item.text} onChange={handleChangeText}></input>\n      <input\n        type=\"checkbox\"\n        checked={item.isComplete}\n        onChange={handleChangeCheck}\n      ></input>\n      <button onClick={handleDeleteClicked}>X</button>\n    </div>\n  );\n};\n","/Users/ochiai/Desktop/Dev/React/recoil-sample/src/index.tsx",[],"/Users/ochiai/Desktop/Dev/React/recoil-sample/src/components/TodoItemCreator.tsx",[],"/Users/ochiai/Desktop/Dev/React/recoil-sample/src/atom/TodoListState.ts",[],"/Users/ochiai/Desktop/Dev/React/recoil-sample/src/components/TodoList.tsx",[],"/Users/ochiai/Desktop/Dev/React/recoil-sample/src/components/TodoListFilters.tsx",[],"/Users/ochiai/Desktop/Dev/React/recoil-sample/src/components/TodoListStats.tsx",[],{"ruleId":"41","severity":1,"message":"42","line":46,"column":56,"nodeType":"43","messageId":"44","endLine":46,"endColumn":58},{"ruleId":"45","severity":1,"message":"46","line":47,"column":20,"nodeType":"47","messageId":"48","endLine":47,"endColumn":22},"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]